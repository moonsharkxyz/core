#include "imports/stdlib.fc";
#include "imports/utils.fc";

(cell, slice, int, int, int, int, cell) load_data() inline {
  slice ds = get_data().begin_parse();
  return
    (ds~load_ref(),
     ds~load_msg_addr(),
     ds~load_uint(1),
     ds~load_uint(3),
     ds~load_uint(64),
     ds~load_uint(64),
     ds~load_ref());
}

() recv_internal(int balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return();
    }
    slice sender_addr = cs~load_msg_addr();
    (cell contracts, slice main_addr, int is_live, int asset, int exp_time, int iv, cell strikes) = load_data();
    int op = in_msg_body~load_uint(32);
    if (equal_slices(sender_addr, main_addr)) {
        if (op == "init"c) {
            iv = in_msg_body~load_uint(64);
            slice aaddr = in_msg_body~load_msg_addr();
            send_raw_message(
                begin_cell()
                .store_uint(0x18, 6)
                .store_slice(aaddr)
                .store_coins(0)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .end_cell(), 64);
            
            set_data(begin_cell().store_ref(contracts).store_slice(main_addr).store_uint(1, 1).store_uint(asset, 3).store_uint(exp_time, 64).store_uint(iv, 64).store_ref(strikes).end_cell());
            return ();
        }
        if (op == "close"c) {
            if (is_live != 0) {
                set_data(begin_cell().store_ref(contracts).store_slice(main_addr).store_uint(0, 1).store_uint(asset, 3).store_uint(exp_time, 64).store_uint(iv, 64).store_ref(strikes).end_cell());
            }
            slice aaddr = in_msg_body~load_msg_addr();
            send_raw_message(
                begin_cell()
                .store_uint(0x18, 6)
                .store_slice(aaddr)
                .store_coins(0)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .end_cell(), 64);
            return ();
        }
        if (op == "add_strike"c) {
            int strike = in_msg_body~load_uint(64);
            cell state_init = calc_strike_init(contracts, main_addr, my_address(), strike);
            slice strike_addr = calc_addr(state_init);

            send_raw_message(begin_cell()
                .store_uint(0x18, 6)
                .store_slice(strike_addr)
                .store_coins(0)
                .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
                .store_ref(state_init)
                .store_ref(begin_cell()
                    .store_uint("init"c, 32)
                    .store_uint(1, 1)
                    .store_slice(in_msg_body)
                .end_cell()).end_cell(), 64);
            set_data(begin_cell().store_ref(contracts).store_slice(main_addr).store_uint(is_live, 1).store_uint(asset, 3).store_uint(exp_time, 64).store_uint(iv, 64).store_ref(begin_cell().store_slice(strike_addr).store_ref(strikes).end_cell()).end_cell());
            return ();
        }
        if (op == "remove_strike"c) {
            int strike = in_msg_body~load_uint(64);
            slice strike_addr = calc_addr(calc_strike_init(contracts, main_addr, my_address(), strike));
            cell new_strikes = begin_cell().end_cell();
            slice strikes_s = strikes.begin_parse();
            while (strikes_s.slice_refs_empty?() != -1) {
                ifnot (strikes_s.slice_data_empty?()) {
                    slice s_addr = strikes_s~load_msg_addr();
                    ifnot (equal_slices(strike_addr,s_addr)) {
                        new_strikes = begin_cell().store_slice(s_addr).store_ref(new_strikes).end_cell();
                    }
                }
                strikes_s = strikes_s~load_ref().begin_parse();
            }
            set_data(begin_cell().store_ref(contracts).store_slice(main_addr).store_uint(is_live, 1).store_uint(asset, 3).store_uint(exp_time, 64).store_uint(iv, 64).store_ref(new_strikes).end_cell());
            slice aaddr = in_msg_body~load_msg_addr();
            send_raw_message(begin_cell()
                .store_uint(0x18, 6)
                .store_slice(calc_addr(calc_strike_init(contracts, main_addr, my_address(), strike)))
                .store_coins(0)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_ref(
                    begin_cell()
                    .store_uint("init"c, 32)
                    .store_uint(0, 1)
                    .store_slice(aaddr)
                    .end_cell()
                ).end_cell(), 64);

            return ();
        }
    }
    if (op == "get_iv_skew"c) {
        int strike = in_msg_body~load_uint(64);
        ifnot(equal_slices(calc_addr(calc_strike_init(contracts, main_addr, my_address(), strike)), sender_addr)) {
            return ();
        }
        int is_live_s = in_msg_body~load_uint(1);
        if (is_live & is_live_s) {
            send_raw_message(begin_cell()
                .store_uint(0x18, 6)
                .store_slice(main_addr)
                .store_coins(0)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1) 
                .store_uint(1, 1)
                .store_ref(begin_cell()
                    .store_uint("return_iv_skew"c, 32)
                    .store_uint(asset, 3)
                    .store_uint(exp_time, 64)
                    .store_uint(strike, 64)
                    .store_slice(in_msg_body)
                    .store_uint(iv, 64)
                    .end_cell()).end_cell(), 64);
        } else {
            ;; add op & amount & sender & exp time & asset
            in_msg_body~skip_bits(130);
            send_raw_message(begin_cell()
                .store_uint(0x18, 6)
                .store_slice(main_addr)
                .store_coins(0)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_uint("return_amount"c, 32)
                .store_uint(asset, 3)
                .store_uint(exp_time, 64)
                .store_slice(in_msg_body)
                .end_cell(), 64);
        }
        return ();
    }
    if (op != "open_pos"c) {
        return ();
    }
    slice owner_addr = in_msg_body~load_msg_addr();
    int index = in_msg_body~load_uint(64);
    if (equal_slices(sender_addr, calc_addr(calc_position_init(contracts, main_addr, calc_addr(calc_user_init(contracts, main_addr, owner_addr)), owner_addr, index)))) {
        int strike = in_msg_body~load_uint(64);
        int is_call = in_msg_body~load_uint(1);
        int is_long = in_msg_body~load_uint(1);
        int qty = in_msg_body~load_uint(64);
        send_raw_message(
                begin_cell()
                .store_uint(0x18, 6)
                .store_slice(calc_addr(calc_strike_init(contracts, main_addr, my_address(), strike)))
                .store_coins(0)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_uint("open_pos"c, 32)
                .store_uint(is_call, 1)
                .store_uint(is_long, 1)
                .store_uint(qty, 64)
                .end_cell(), 64);
        {-
            change iv
            set_data(begin_cell().store_ref(contracts).store_slice(main_addr).store_uint(is_live, 1).store_uint(asset, 3).store_uint(exp_time, 64).store_uint(iv, 64).store_ref(strikes).end_cell());
        -}
    }
}


(int, int, int, int, cell) get_info() method_id {
    (cell contracts, slice main_addr, int is_live, int asset, int exp_time, int iv, cell strikes) = load_data();
    return (is_live, asset, exp_time, iv, strikes);
}

slice get_strike_address(int strike) method_id {
    slice ds = get_data().begin_parse();
    cell contracts = ds~load_ref();
    slice main_addr = ds~load_msg_addr();
    return (calc_addr(calc_strike_init(contracts, main_addr, my_address(), strike)));
}
