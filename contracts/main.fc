#pragma version >=0.4.0;
#include "imports/stdlib.fc";
#include "imports/utils.fc";
#include "imports/utility.fc";


(cell, slice, slice, int, int, int, int, cell, cell) load_data() inline {
    slice ds = get_data().begin_parse();

    cell contracts = ds~load_ref();
    slice aaddr = ds~load_msg_addr();
    slice jaddr = ds~load_msg_addr();
    
    int call_long = ds~load_uint(64);
    int call_short = ds~load_uint(64);

    int put_long = ds~load_uint(64);
    int put_short = ds~load_uint(64);

    cell req_dic = ds~load_dict();

    cell boards = ds~load_ref();

    return (contracts, aaddr, jaddr, call_long, call_short, put_long, put_short, req_dic, boards);
}

() store_data(cell contracts, slice aaddr, slice jaddr, int call_long, int call_short, int put_long, int put_short, cell req_dic, cell boards) impure {
    set_data(
        begin_cell()
            .store_ref(contracts)
            .store_slice(aaddr)
            .store_slice(jaddr)
            .store_uint(call_long, 64)
            .store_uint(call_short, 64)
            .store_uint(put_long, 64)
            .store_uint(put_short, 64)
            .store_dict(req_dic)
            .store_ref(boards)
            .end_cell()
    );
}

() recv_internal(cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }

    slice sender_addr = cs~load_msg_addr();
    (cell contracts_cell, slice aaddr, slice jaddr, int call_long, int call_short, int put_long, int put_short, cell req_dic, cell boards_cell) = load_data();
    if (equal_slices(sender_addr, ORACLE)){
        int asset = in_msg_body~load_uint(3);
        (slice payload, int exist) = req_dic.udict_get?(3, asset);
        ifnot (exist) {
            throw(779);
        }
        int price = in_msg_body~load_uint(64);

        while (payload.slice_refs_empty?() != -1) {
            int exp_time = payload~load_uint(64);
            int strike = payload~load_uint(64);

            int is_call = payload~load_uint(1);
            int is_long = payload~load_uint(1);
            int qty = payload~load_uint(64);
            int collateral = payload~load_uint(64);
            int liq_price = payload~load_uint(64);

            slice owner_addr = payload~load_msg_addr();
            
            int iv = payload~load_uint(64);
            int skew = payload~load_uint(64);

            cell state_init = calc_user_init(contracts_cell, my_address(), owner_addr);
            send_raw_message(begin_cell()
            .store_uint(0x18, 6)
            .store_slice(calc_addr(state_init))
            .store_grams(50000000)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_ref(begin_cell()
                .store_uint("open_pos"c, 32)
                .store_uint(get_proxy_utility(price, strike, is_call, is_long, exp_time, iv, skew), 64)
                .store_uint(asset, 3)
                .store_uint(exp_time, 64)
                .store_uint(strike, 64)
                .store_uint(is_call, 1)
                .store_uint(is_long, 1)
                .store_uint(qty, 64)
                .store_uint(collateral, 64)
                .store_uint(liq_price, 64)
                .store_slice(owner_addr)
                .store_uint(iv, 64)
                .store_uint(skew, 64)
            .end_cell()).end_cell(), 0);

            payload = payload~load_ref().begin_parse();
        }
        req_dic~udict_delete?(3, asset);
        store_data(contracts_cell,aaddr,jaddr,call_long,call_short,put_long,put_short,req_dic,boards_cell);
        return ();
    }
    int op = in_msg_body~load_uint(32);
    if (equal_slices(sender_addr, aaddr)){
        if (op == "add_strike"c) {
            int asset = in_msg_body~load_uint(3);
            int exp_time = in_msg_body~load_uint(64);
            int strike = in_msg_body~load_uint(64);
            int skew = in_msg_body~load_uint(64);
            send_raw_message(
                begin_cell()
                .store_uint(0x18, 6)
                .store_slice(calc_addr(calc_board_init(contracts_cell, my_address(), asset, exp_time)))
                .store_coins(50000000)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_uint(op, 32)
                .store_uint(strike, 64)
                .store_uint(skew, 64)
                .end_cell(), 0);
            return ();
        }
        if (op == "remove_strike"c) {
            int asset = in_msg_body~load_uint(3);
            int exp_time = in_msg_body~load_uint(64);
            int strike = in_msg_body~load_uint(64);
            send_raw_message(
                begin_cell()
                .store_uint(0x18, 6)
                .store_slice(calc_addr(calc_board_init(contracts_cell, my_address(), asset, exp_time)))
                .store_coins(35000000)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_uint(op, 32)
                .store_uint(strike, 64)
                .end_cell(), 64);
            return ();
        }
        if (op == "init_board"c) {
            int asset = in_msg_body~load_uint(3);
            int exp_time = in_msg_body~load_uint(64);
            int iv = in_msg_body~load_uint(64);
            cell state_init = calc_board_init(contracts_cell, my_address(), asset, exp_time);
            slice board_addr = calc_addr(state_init);
            boards_cell = begin_cell().store_slice(board_addr).store_ref(boards_cell).end_cell();
            store_data(contracts_cell,aaddr,jaddr,call_long,call_short,put_long,put_short,req_dic,boards_cell);
            send_raw_message(begin_cell()
                .store_uint(0x18, 6)
                .store_slice(board_addr)
                .store_grams(0)
                .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
                .store_ref(state_init)
                .store_ref(begin_cell()
                    .store_uint("init"c, 32)
                    .store_uint(iv, 64)
                .end_cell()).end_cell(), 64);
            return ();
        }
        if (op == "close_board"c) {
            int asset = in_msg_body~load_uint(3);
            int exp_time = in_msg_body~load_uint(64);
            slice board_addr = calc_addr(calc_board_init(contracts_cell, my_address(), asset, exp_time));
            boards_cell = begin_cell().store_slice(board_addr).store_ref(boards_cell).end_cell();
            slice boards = boards_cell.begin_parse();
            cell new_boards = begin_cell().end_cell();
            while (boards.slice_refs_empty?() != -1) {
                ifnot (boards.slice_data_empty?()) {
                    slice b_addr = boards~load_msg_addr();
                    ifnot (equal_slices(board_addr,b_addr)) {
                        new_boards = begin_cell().store_slice(board_addr).store_ref(new_boards).end_cell();
                    }
                }
                boards = boards~load_ref().begin_parse();
            }
            send_raw_message(
                begin_cell()
                .store_uint(0x18, 6)
                .store_slice(board_addr)
                .store_coins(35000000)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_uint("close"c, 32)
                .end_cell(), 64);
            return ();
        }
        if (op == "set_jaddr"c) {
            slice jaddr = in_msg_body~load_msg_addr();
            store_data(contracts_cell,aaddr,jaddr,call_long,call_short,put_long,put_short,req_dic,boards_cell);
            return ();
        }
    }

    if (op == 0x7362d09c) {
        ifnot (equal_slices(sender_addr, jaddr)) {
            return ();
        }
        int amount = in_msg_body~load_coins(); 
        slice from_address = in_msg_body~load_msg_addr();
        
        cell state_init = calc_user_init(contracts_cell, my_address(), from_address);
        send_raw_message(begin_cell()
            .store_uint(0x18, 6)
            .store_slice(calc_addr(state_init))
            .store_grams(0)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_ref(begin_cell()
                .store_uint("add_balance"c, 32)
                .store_uint(amount, 64)
            .end_cell()).end_cell(), 64);
        return ();
    }
    if (op == "open_pos"c) {

        int asset = in_msg_body~load_uint(3);
        int exp_time = in_msg_body~load_uint(64);
        int strike = in_msg_body~load_uint(64);

        int is_call = in_msg_body~load_uint(1);
        int is_long = in_msg_body~load_uint(1);
        int qty = in_msg_body~load_uint(64);
        int collateral = in_msg_body~load_uint(64);
        int liq_price = in_msg_body~load_uint(64);

        
        slice contracts = contracts_cell.begin_parse();
        cell user_contract = contracts~load_ref();
        cell position_contract = contracts~load_ref();
        cell board_contract = contracts~load_ref();
        cell strike_contract = contracts~load_ref();
        slice boards = boards_cell.begin_parse();

        slice board_addr = calc_addr(calc_board_init(contracts_cell, my_address(), asset, exp_time));

        while (boards.slice_refs_empty?() != -1) {
            slice a = boards~load_msg_addr();
            if (equal_slices(a, board_addr)) {
                send_raw_message(
                begin_cell()
                .store_uint(0x18, 6)
                .store_slice(board_addr)
                .store_coins(100000000)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_uint(op, 32)
                .store_ref(begin_cell()
                .store_uint(asset, 3)
                .store_uint(exp_time, 64)
                .store_uint(strike, 64)
                .store_uint(is_call, 1)
                .store_uint(is_long, 1)
                .store_uint(qty, 64)
                .store_uint(collateral, 64)
                .store_uint(liq_price, 64)
                .store_slice(sender_addr)
                .end_cell()).end_cell(), 0);
                return ();
            }
            boards = boards~load_ref().begin_parse();
        }
        return ();
    }
    if (op == "get_price"c) {
        in_msg_body = in_msg_body~load_ref().begin_parse();

        int asset = in_msg_body~load_uint(3);
        int exp_time = in_msg_body~load_uint(64);
        int strike = in_msg_body~load_uint(64);

        int is_call = in_msg_body~load_uint(1);
        int is_long = in_msg_body~load_uint(1);
        int qty = in_msg_body~load_uint(64);
        int collateral = in_msg_body~load_uint(64);
        int liq_price = in_msg_body~load_uint(64);

        slice owner_addr = in_msg_body~load_msg_addr();
        
        int iv = in_msg_body~load_uint(64);
        int skew = in_msg_body~load_uint(64);
        int allowed = in_msg_body~load_uint(1);
        ifnot (allowed) {
            return ();
        }
        slice contracts = contracts_cell.begin_parse();
        
        cell user_contract = contracts~load_ref();
        cell position_contract = contracts~load_ref();
        cell board_contract = contracts~load_ref();
        cell strike_contract = contracts~load_ref();

        slice strike_addr = calc_addr(calc_strike_init(contracts_cell, my_address(), calc_addr(calc_board_init(contracts_cell, my_address(), asset, exp_time)), strike));

        ifnot (equal_slices(sender_addr, strike_addr)) {
            return ();
        }
        (slice payload, int exist) = req_dic.udict_get?(3, asset);
        if (exist) {
            req_dic~udict_set(3, asset, begin_cell()
            .store_uint(exp_time, 64)
            .store_uint(strike, 64)
            .store_uint(is_call, 1)
            .store_uint(is_long, 1)
            .store_uint(qty, 64)
            .store_uint(collateral, 64)
            .store_uint(liq_price, 64)
            .store_slice(owner_addr)
            .store_uint(iv, 64)
            .store_uint(skew, 64)
            .store_ref(begin_cell().store_slice(payload).end_cell()).end_cell().begin_parse());
        } else {
            send_raw_message(
                begin_cell()
                .store_uint(0x18, 6)
                .store_slice(ORACLE)
                .store_coins(50000000)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_uint("req_price"c, 32)
                .store_uint(asset, 3)
                .end_cell(), 0);
            req_dic~udict_set(3, asset, begin_cell()
            .store_uint(exp_time, 64)
            .store_uint(strike, 64)
            .store_uint(is_call, 1)
            .store_uint(is_long, 1)
            .store_uint(qty, 64)
            .store_uint(collateral, 64)
            .store_uint(liq_price, 64)
            .store_slice(owner_addr)
            .store_uint(iv, 64)
            .store_uint(skew, 64)
            .end_cell().begin_parse());
        }
        store_data(contracts_cell,aaddr,jaddr,call_long,call_short,put_long,put_short,req_dic,boards_cell);
        return ();
    }
    
}


slice get_user_addr(slice user_w_addr) method_id {
    slice ds = get_data().begin_parse();
    cell contracts_cell = ds~load_ref();
    return calc_addr(calc_user_init(contracts_cell, my_address(), user_w_addr));
}

cell get_boards() method_id {
    (_, _, _, _, _, _, _, _, cell boards_cell) = load_data();
    return boards_cell;
}
