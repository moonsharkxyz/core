#include "imports/stdlib.fc";
(cell, slice, slice, slice, int, int, int, int, int, int, int, int, int, int) load_data() inline {
    slice d = get_data().begin_parse();
    cell contracts = d~load_ref();
    slice main_address = d~load_msg_addr();
    slice user_address = d~load_msg_addr();
    slice owner_address = d~load_msg_addr();
    int index = d~load_uint(64);
    int is_closed =  d~load_uint(1);
    slice ds = d~load_ref().begin_parse();
    return (contracts, main_address, user_address, owner_address, index, is_closed, ds~load_uint(3), ds~load_uint(64), ds~load_uint(64), ds~load_uint(1), ds~load_uint(1), ds~load_uint(64), ds~load_uint(64), ds~load_uint(64));
}

() store_data(cell contracts, slice main_address, slice user_address, slice owner_address, int index, int is_closed, int asset, int exp_time, int strike, int is_call, int is_long, int qty, int collateral, int liq_price) impure {
    set_data(
        begin_cell()
            .store_ref(contracts)
            .store_slice(main_address)
            .store_slice(user_address)
            .store_slice(owner_address)
            .store_uint(index, 64)
            .store_uint(is_closed, 1)
            .store_ref(begin_cell()
                .store_uint(asset, 3)
                .store_uint(exp_time, 64)
                .store_uint(strike, 64)
                .store_uint(is_call, 1)
                .store_uint(is_long, 1)
                .store_uint(qty, 64)
                .store_uint(collateral, 64)
                .store_uint(liq_price, 64)
                .end_cell()
            ).end_cell()
    );
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    (cell contracts, slice main_address, slice user_address, slice owner_address, int index, int is_closed, int asset, int exp_time, int strike, int is_call, int is_long, int qty, int collateral, int liq_price) = load_data();
    if (equal_slices(sender_address, user_address)){
        int asset = in_msg_body~load_uint(3);
        int exp_time = in_msg_body~load_uint(64);
        int strike = in_msg_body~load_uint(64);
        int is_call = in_msg_body~load_uint(1);
        int is_long = in_msg_body~load_uint(1);
        int qty = in_msg_body~load_uint(64);
        int collateral = in_msg_body~load_uint(64);
        int liq_price = in_msg_body~load_uint(64);

        store_data(contracts, main_address, user_address, owner_address, index, is_closed, asset, exp_time, strike, is_call, is_long, qty, collateral, liq_price);
    }
    if (equal_slices(sender_address, owner_address)){
        int op = in_msg_body~load_uint(32);
        if (op == "close_pos"c) {
            if (is_closed){
                return ();
            }
            is_closed = 1;
            store_data(contracts, main_address, user_address, owner_address, index, is_closed, asset, exp_time, strike, is_call, is_long, qty, collateral, liq_price);
            return ();
        }
    }
    int op = in_msg_body~load_uint(32);
    if (op == "liquidate"c) {
            {- if (is_closed){
                return ();
            }
            is_closed = 1;
            store_data(contracts, main_address, user_address, owner_address, index, is_closed, asset, exp_time, strike, is_call, is_long, qty, collateral, liq_price); -}
    }
    
}

cell get_info() method_id {
    slice d = get_data().begin_parse();
    cell contracts = d~load_ref();
    slice main_address = d~load_msg_addr();
    slice user_address = d~load_msg_addr();
    slice owner_address = d~load_msg_addr();
    int index = d~load_uint(64);
    slice ds = d~load_ref().begin_parse();
    return begin_cell().store_uint(index, 64).store_slice(ds).end_cell();
}