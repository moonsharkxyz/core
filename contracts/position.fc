#include "imports/stdlib.fc";
#include "imports/utils.fc";
(cell, slice, slice, slice, int, int, int, int, int, int, int, int, int, int, int) load_data() inline {
	slice d = get_data().begin_parse();
	cell contracts = d~load_ref();
	slice main_addr = d~load_msg_addr();
	slice user_addr = d~load_msg_addr();
	slice owner_addr = d~load_msg_addr();
	int index = d~load_uint(64);
	int is_closed = d~load_uint(1);
	slice ds = d~load_ref().begin_parse();
	return (contracts, main_addr, user_addr, owner_addr, index, is_closed, ds~load_uint(3), ds~load_uint(64), ds~load_uint(64), ds~load_uint(1), ds~load_uint(1), ds~load_uint(64), ds~load_uint(64), ds~load_uint(64), ds~load_uint(64));
}

() store_data(cell contracts, slice main_addr, slice user_addr, slice owner_addr, int index, int is_closed, int asset, int exp_time, int strike, int is_call, int is_long, int qty, int collateral, int liq_price, int opt_price) impure {
	set_data(
		begin_cell()
			.store_ref(contracts)
			.store_slice(main_addr)
			.store_slice(user_addr)
			.store_slice(owner_addr)
			.store_uint(index, 64)
			.store_uint(is_closed, 1)
			.store_ref(begin_cell()
				.store_uint(asset, 3)
				.store_uint(exp_time, 64)
				.store_uint(strike, 64)
				.store_uint(is_call, 1)
				.store_uint(is_long, 1)
				.store_uint(qty, 64)
				.store_uint(collateral, 64)
				.store_uint(liq_price, 64)
				.store_uint(opt_price, 64)
				.end_cell()
			).end_cell()
	);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
	slice cs = in_msg_full.begin_parse();
	int flags = cs~load_uint(4);
	if (flags & 1) {
		return ();
	}
	slice sender_addr = cs~load_msg_addr();
	(cell contracts, slice main_addr, slice user_addr, slice owner_addr, int index, int is_closed, int asset, int exp_time, int strike, int is_call, int is_long, int qty, int collateral, int liq_price, int opt_price) = load_data();
	if (equal_slices(sender_addr, user_addr)){
		asset = in_msg_body~load_uint(3);
		exp_time = in_msg_body~load_uint(64);
		strike = in_msg_body~load_uint(64);
		is_call = in_msg_body~load_uint(1);
		is_long = in_msg_body~load_uint(1);
		qty = in_msg_body~load_uint(64);
		collateral = in_msg_body~load_uint(64);
		liq_price = in_msg_body~load_uint(64);
		opt_price = in_msg_body~load_uint(64);

		send_raw_message(begin_cell()
			.store_uint(0x18, 6)
			.store_slice(calc_addr(calc_board_init(contracts, main_addr, asset, exp_time)))
			.store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
			.store_uint("open_pos"c, 32)
			.store_slice(owner_addr)
			.store_uint(index, 64)
			.store_uint(strike, 64)
			.store_uint(is_call, 1)
			.store_uint(is_long, 1)
			.store_uint(qty, 64)
			.end_cell(), 64);
		store_data(contracts, main_addr, user_addr, owner_addr, index, is_closed, asset, exp_time, strike, is_call, is_long, qty, collateral, liq_price, opt_price);
	}
	if (is_closed){
		return ();
	}
	if (equal_slices(sender_addr, owner_addr)){
		store_data(contracts, main_addr, user_addr, owner_addr, index, 1, asset, exp_time, strike, is_call, is_long, qty, collateral, liq_price, opt_price);
		send_raw_message(begin_cell()
			.store_uint(0x18, 6)
			.store_slice(calc_addr(calc_board_init(contracts, main_addr, asset, exp_time)))
			.store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
			.store_uint("close_pos"c, 32)
			.store_slice(owner_addr)
			.store_uint(index, 64)
			.store_uint(strike, 64)
			.store_uint(is_call, 1)
			.store_uint(is_long, 1)
			.store_uint(qty, 64)
			.store_uint(opt_price, 64)
			.store_uint(collateral, 64)
			.end_cell(), 64);
	}
}

cell get_info() method_id {
	slice d = get_data().begin_parse();
	cell contracts = d~load_ref();
	slice main_addr = d~load_msg_addr();
	slice user_addr = d~load_msg_addr();
	slice owner_addr = d~load_msg_addr();
	int index = d~load_uint(64);
	int is_closed = d~load_uint(1);
	slice ds = d~load_ref().begin_parse();
	return (begin_cell().store_uint(index, 64).store_uint(is_closed, 1).store_slice(ds).end_cell());
}