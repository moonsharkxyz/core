#include "imports/stdlib.fc";
#include "imports/utils.fc";

(cell, slice, slice, int) load_data() inline {
  var ds = get_data().begin_parse();
  return
	(ds~load_ref(),
	 ds~load_msg_addr(),
	 ds~load_msg_addr(),
	 ds~load_uint(64)
	);
}

() recv_internal(int balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
	if (in_msg_body.slice_empty?()) {
		return();
	}
	slice cs = in_msg_full.begin_parse();
	int flags = cs~load_uint(4);
	if (flags & 1) {
		return();
	}
	slice sender_addr = cs~load_msg_addr();
	(cell contracts, slice main_addr, slice owner_addr, int index) = load_data();
	ifnot(equal_slices(sender_addr, main_addr)){
	  return ();
	}
	cell state_init = calc_position_init(contracts, main_addr, my_address(), owner_addr, index);
	send_raw_message(
		begin_cell()
		.store_uint(0x18, 6)
		.store_slice(calc_addr(state_init))
		.store_coins(0)
		.store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
		.store_ref(state_init)
		.store_ref(
			begin_cell()
			.store_slice(in_msg_body)
			.end_cell()
		).end_cell(), 64);
	set_data(begin_cell().store_ref(contracts).store_slice(main_addr).store_slice(owner_addr).store_uint(index + 1, 64).end_cell());
}

int get_info() method_id {
  (cell contracts, slice main_addr, slice owner_addr, int index) = load_data();
  return (index);
}

slice get_position_address(int index) method_id {
	slice ds = get_data().begin_parse();
    cell contracts = ds~load_ref();
	slice main_addr = ds~load_msg_addr();
	slice owner_addr = ds~load_msg_addr();
	return (calc_addr(calc_position_init(contracts, main_addr, my_address(), owner_addr, index)));
}